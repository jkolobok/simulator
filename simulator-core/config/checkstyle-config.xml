<?xml version="1.0"?>

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
        <property name="severity" value="warning" />
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation">
        <property name="severity" value="warning" />
    </module>

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
            <property name="severity" value="warning" />
        </module>
        <module name="JavadocType">
            <property name="severity" value="warning" />
        </module>
        <module name="JavadocVariable">
            <property name="excludeScope" value="nothing" />
            <property name="scope" value="anoninner" />
            <property name="severity" value="warning" />
        </module>
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="false" />
            <property name="checkFirstSentence" value="false" />
            <property name="checkHtml" value="true" />
            <property name="scope" value="private" />
            <property name="severity" value="warning" />
            <property name="tokens"
                      value="INTERFACE_DEF, CLASS_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <property name="severity" value="warning" />
        </module>
        <module name="LocalFinalVariableName">
            <property name="severity" value="warning" />
        </module>
        <module name="LocalVariableName">
            <property name="severity" value="warning" />
        </module>
        <module name="MemberName">
            <property name="severity" value="warning" />
        </module>
        <module name="MethodName">
            <property name="severity" value="warning" />
        </module>
        <module name="PackageName">
            <property name="severity" value="warning" />
        </module>
        <module name="ParameterName">
            <property name="severity" value="warning" />
        </module>
        <module name="StaticVariableName">
            <property name="severity" value="warning" />
        </module>
        <module name="TypeName">
            <property name="severity" value="warning" />
        </module>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${project.basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${project.basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <property name="severity" value="warning" />
        </module>
        <module name="IllegalImport">
            <property name="severity" value="warning" />
        </module>
        <!-- defaults to sun.* packages -->
        <module name="RedundantImport">
            <property name="severity" value="warning" />
        </module>
        <module name="UnusedImports">
            <property name="severity" value="warning" />
        </module>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="FileLength">
            <property name="severity" value="warning" />
        </module>
        <module name="LineLength">
            <property name="ignorePattern" value="^$" />
            <property name="max" value="100" />
            <property name="severity" value="warning" />
            <property name="tabWidth" value="4" />
        </module>
        <module name="MethodLength">
            <property name="severity" value="warning" />
        </module>
        <module name="ParameterNumber">
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad">
            <property name="severity" value="warning" />
        </module>
        <module name="MethodParamPad">
            <property name="severity" value="warning" />
        </module>
        <module name="OperatorWrap">
            <property name="severity" value="warning" />
        </module>
        <module name="ParenPad">
            <property name="severity" value="warning" />
        </module>
        <module name="TypecastParenPad">
            <property name="severity" value="warning" />
        </module>
        <module name="TabCharacter">
            <property name="severity" value="warning" />
        </module>

        <!-- Adding override for a checkstyle warning around generics.
        The default configuration that comes with checkstyle 4.0 require
        whitespace around the <...> that is used for generic parameters.
        See checkstyle bug #1374798
        -->
        <module name="NoWhitespaceAfter">
            <!-- Default tokens and additional GENERIC_START -->
            <property name="tokens" value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, GENERIC_START" />
            <property name="severity" value="warning" />
        </module>

        <module name="NoWhitespaceBefore">
            <!-- Default tokens and additional GENERIC_START and GENERIC_END -->
            <property name="tokens" value="SEMI, POST_DEC, POST_INC, GENERIC_START, GENERIC_END" />
            <property name="severity" value="warning" />
        </module>

        <module name="WhitespaceAfter">
            <!-- Default tokens and additional GENERIC_END -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST, GENERIC_END" />
            <property name="severity" value="warning" />
        </module>

        <module name="WhitespaceAround">
            <!-- Default tokens without GENERIC_START and GENERIC_END -->
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND, WILDCARD_TYPE" />
            <property name="severity" value="warning" />
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder">
            <property name="severity" value="warning" />
        </module>
        <module name="RedundantModifier">
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="severity" value="warning" />
        </module>
        <module name="EmptyBlock">
            <property name="option" value="text" />
            <property name="severity" value="warning" />
            <property name="tokens"
                      value="LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, STATIC_INIT" />
        </module>
        <module name="LeftCurly">
            <property name="maxLineLength" value="80" />
            <property name="option" value="nl" />
            <property name="severity" value="warning" />
            <property name="tokens"
                      value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF" />
        </module>
        <module name="NeedBraces">
            <property name="severity" value="warning" />
        </module>
        <module name="RightCurly">
            <property name="option" value="alone" />
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="AvoidInlineConditionals">
            <property name="severity" value="warning" />
        </module>
        <module name="DoubleCheckedLocking">
            <property name="severity" value="warning" />
        </module>
        <module name="EmptyStatement">
            <property name="severity" value="warning" />
        </module>
        <module name="EqualsHashCode">
            <property name="severity" value="warning" />
        </module>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true" />
            <property name="ignoreSetter" value="true" />
            <property name="severity" value="warning" />
            <property name="tokens" value="PARAMETER_DEF, VARIABLE_DEF" />
        </module>
        <module name="IllegalInstantiation">
            <property name="severity" value="warning" />
        </module>
        <module name="InnerAssignment">
            <property name="severity" value="warning" />
        </module>
        <module name="MagicNumber">
            <property name="severity" value="warning" />
        </module>
        <module name="MissingSwitchDefault">
            <property name="severity" value="warning" />
        </module>
        <module name="RedundantThrows">
            <property name="severity" value="warning" />
        </module>
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="warning" />
        </module>
        <module name="SimplifyBooleanReturn">
            <property name="severity" value="warning" />
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="DesignForExtension">
            <property name="severity" value="ignore" />
        </module>
        <module name="FinalClass">
            <property name="severity" value="ignore" />
        </module>
        <module name="HideUtilityClassConstructor">
            <property name="severity" value="warning" />
        </module>
        <module name="InterfaceIsType">
            <property name="severity" value="warning" />
        </module>
        <module name="VisibilityModifier">
            <property name="severity" value="warning" />
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="warning" />
        </module>
        <!--
        <module name="FinalParameters">
            <property name="severity" value="warning"/>
        </module>
        -->
        <module name="GenericIllegalRegexp">
            <property name="severity" value="warning" />
            <property name="format" value="\s+$" />
            <property name="message" value="Line has trailing spaces." />
        </module>
        <module name="TodoComment">
            <property name="severity" value="warning" />
        </module>
        <module name="UpperEll">
            <property name="severity" value="warning" />
        </module>
    </module>

</module>
